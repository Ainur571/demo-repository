AWSTemplateFormatVersion: "2010-09-09"
Description: "My final project template"

Parameters:
  myName:
    Description: My Name for Tags
    Type: String 
    Default: "Ainur"

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"

  InstanceType:
    Description: Instance Type for Auto Scaling Group
    Type: String
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
      - "t3.micro"

  PublicSubnet1CIDR:
    Description: 1 CIDR for public subnet
    Type: String
    Default: "10.0.1.0/24"
 
  PublicSubnet2CIDR:
    Description: 2 CIDR for public subnet
    Type: String
    Default: "10.0.2.0/24"

  PrivateSubnet1CIDR:
    Description: 1 CIDR for private subnet
    Type: String
    Default: "10.0.3.0/24"

  PrivateSubnet2CIDR:
    Description: 2 CIDR for private subnet
    Type: String
    Default: "10.0.4.0/24"  

Mappings:
  RegionMap: 
    us-east-1:
      AMIID: ami-0c101f26f147fa7fd
    us-west-1: 
      AMIID: "ami-0d5ae304a0b933620"

Resources:
  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: ain1
      KeyType: rsa
      Tags:
        - Key: Owner
          Value: !Ref myName

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref myName
      GroupDescription: Allows SSH and HTTP access 
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Owner
          Value: !Ref myName
  
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Owner
          Value: !Ref myName
  
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref myName
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref myInternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Ref myName
    
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Owner
          Value: !Ref myName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Ref myName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Owner
          Value: !Ref myName
       
  myRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Owner
          Value: !Ref myName

  pubRoute: 
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref myRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  pubSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref myRT

  pubSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref myRT

  #NAT for private subnets

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NATGatewayEIP
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Owner
          Value: !Ref myName

  # ELASTIC IP

  NATGatewayEIP:
    Type: AWS::EC2::SecurityGroup
    DependsOn: myVPC
    Properties:
      Domain: vpc

  #PRIVATE ROUTING

  PriavteRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myName
      Tags:
        - Key: Owner
          Value: !Ref myName    

  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PriavteRouteTable
      DestinationCidrBlock: "0.0.0.0/0"       
      NATGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PriavteRouteTable

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate                   
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMIID ]
        KeyName: !Ref MyKeyPair
        SecurityGroupIds:
          - !Ref MySecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello from Ainur's instance! !$HOSTNAME!</h1>" > /var/www/html/index.html 

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref myVPC     

  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: Internet-facting
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref MySecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  myALBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref myALB  
      Port: 80
      Protocol: HTTP

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupArn:
        - !Ref MyTargetGroup     


Outputs:
  ALBEndpoint:
    Description: URL of the  Application Load Balancer
    Value: !GetAtt myALB.DNSName